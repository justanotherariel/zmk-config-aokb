#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keys_es.h"

#define _BASE   0
#define _QWER   1
#define _GAME   2
#define _GNUM   3
#define _LOWER  4
#define _RAISE  5
#define _FUNCT  6
#define _ADJUST 7

#define DSC_MUT LS(LC(F9))
#define DSC_DFN LS(LC(F11))
#define DSC_SSC LS(LC(F10))
#define DSC_EXT LS(LC(F12))

#define SS_W    LG(RS(S))
#define SS_M    LG(RS(N4))

#define TI_W    RA(N4)
#define TI_M    RA(ES_N_TILDE)

/ {
    macros {
        rabk: rabk {
            label = "rabk";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_tap &kp ES_LT>
                , <&macro_release &kp LSHFT>
                ;
        };

        labk: labk {
            label = "labk";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp ES_LT>
                ;
        };

        ca_ll: ca_ll {
            label = "ca_ll";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp ES_MIDDOT>
                , <&macro_tap &kp L>
                ;
        };

        talpha: talpha {
            label = "talpha";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &to _BASE>
                , <&macro_pause_for_release>
                , <&macro_tap &to _GAME>
                ;
        };
    };
};

/ {
    behaviors {
        ht_tp: ht_tp {
            compatible = "zmk,behavior-hold-tap";
            label = "hp_tp";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp ES_SEMI &kp W       &kp F       &kp P       &kp B                   &kp J       &kp L       &kp U       &kp Y       &kp Q
&kp TAB     &kp A       &kp R       &kp S       &kp T       &kp G                   &kp M       &kp N       &kp E       &kp I       &kp O       &kp RET
&kp LCTL    &kp Z       &kp X       &kp C       &kp D       &kp V                   &kp K       &kp H      &kp ES_COMMA &kp ES_DOT  &kp ES_FSLH &kp LALT
                                    &kp LWIN    &kp SPACE   &mo _RAISE              &mo _LOWER  &kp BSPC    &kp RSFT
            >;
        };

        qwerty_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp Q       &kp W       &kp E       &kp R       &kp T                   &kp Y       &kp U       &kp I       &kp O       &kp P
&kp TAB     &kp A       &kp S       &kp D       &kp F       &kp G                   &kp H       &kp J       &kp K       &kp L       &kp ES_SEMI &kp RET
&kp LCTL    &kp Z       &kp X       &kp C       &kp V       &kp B                   &kp N       &kp M      &kp ES_COMMA &kp ES_DOT  &kp ES_FSLH &kp LALT
                                    &kp LWIN    &kp SPACE   &mo _RAISE              &mo _LOWER  &kp BSPC    &kp RSFT
            >;
        };

        game_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp TAB     &kp Q       &kp W       &kp E       &kp R                   &kp Y       &kp U       &kp I       &kp O       &kp P
&kp ESC     &kp LSFT    &kp A       &kp S       &kp D       &kp F                   &kp H       &kp J       &kp K       &kp L       &kp ES_N_TILDE &kp RET
&kp B       &kp LCTL    &kp Z       &kp X       &kp C       &kp V                   &kp N       &kp M      &kp ES_COMMA &kp ES_DOT  &kp ES_MINUS &kp LGUI
                                    &kp LALT    &kp SPACE   &mo _GNUM               &mo _LOWER  &kp BSPC    &talpha
            >;
        };

        gnum_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp N0      &kp N7      &kp T       &kp N1      &kp N2                  &trans      &trans      &trans      &trans      &trans
&trans      &trans      &kp N8      &kp G       &kp N3      &kp N4                  &trans      &trans      &trans      &trans      &trans      &kp LA(F4)
&trans      &trans      &kp N9      &kp B       &kp N5      &kp N6                  &trans      &trans      &trans      &trans      &trans      &trans
                                    &trans      &trans      &trans                  &trans      &trans      &trans
            >;
        };

        lower_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp ES_IEXCL &labk      &rabk       &kp ES_AMPS &kp ES_PIPE             &kp RA(E)   &kp N7      &kp N8      &kp N9      &ca_ll
&trans      &kp ES_SQT &kp ES_MINUS &kp ES_PLUS &kp ES_EQUAL &kp ES_EXCL         &kp ES_N_TILDE &kp N4      &kp N5      &kp N6      &kp N0      &trans
&trans  &kp ES_CARET &kp ES_PRCNT &kp ES_ASTRK &kp ES_UNDER &ht_tp TI_W TI_M &ht_tp ES_COMMA ES_DOT &kp N1  &kp N2      &kp N3      &mo _FUNCT  &trans
                                    &trans      &trans      &mo _RAISE              &mo _LOWER  &trans      &trans
            >;
        };

        raise_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
   &ht_tp LA(F4) RG(Q)  &kp HOME    &kp UP      &kp END     &kp INS      &ht_tp ES_ORDM ES_ORDF &kp ES_LBKT &kp ES_RBKT &kp ES_HASH &kp ES_IQMARK
&trans      &kp ESC     &kp LEFT    &kp DOWN    &kp RIGHT   &kp DEL                 &kp ES_QMARK &kp ES_LPAR &kp ES_RPAR &kp ES_COLON &kp ES_DQT &trans
&trans      &mo _FUNCT  &kp ES_GRAVE &kp ES_C_CEDILLA &kp ES_ACUTE &kp ES_UMLAUT    &kp ES_AT   &kp ES_LBRC &kp ES_RBRC &kp ES_DLLR &kp ES_BLSH &trans
                                    &trans      &trans      &mo _RAISE              &mo _LOWER  &trans      &trans
            >;
        };

        funct_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp SLCK    &kp DSC_SSC &none       &none       &kp CLCK                &kp F12     &kp F7      &kp F8      &kp F9      &kp PAUSE_BREAK
&trans      &kp PSCRN   &kp C_PREV  &kp C_NEXT  &kp C_PP    &kp C_VOL_UP            &kp F11     &kp F4      &kp F5      &kp F6 &ht_tp SS_W SS_M &trans
&trans      &trans      &kp DSC_DFN &kp DSC_MUT &kp C_MUTE  &kp C_VOL_DN            &kp F10     &kp F1      &kp F2      &kp F3      &trans      &trans
                                    &trans      &trans      &mo _RAISE              &mo _LOWER  &trans      &trans
            >;
        };

        adjust_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &none       &none       &none       &none       &none                   &kp PG_UP   &to _GAME   &none       &none       &none 
&trans      &none       &none       &none       &none       &none                   &kp PG_DN   &to _BASE   &none       &none       &none       &trans
&kp RCLT    &none       &none       &none       &none       &none                   &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &to _QWER &kp RALT
                                    &kp RWIN    &trans      &mo _RAISE              &mo _LOWER  &trans      &kp LSFT
            >;
        };

    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <_LOWER _RAISE>;
            then-layer = <_ADJUST>;
        };
    };
};