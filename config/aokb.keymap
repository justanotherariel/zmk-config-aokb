#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE   0
#define _LOWER  1
#define _RAISE  2
#define _FUNCT  3
#define _ADJUST 4

#define D_MUT LS(LC(F9))
#define D_SIL LS(LC(F11))
#define D_SHS LS(LC(F10))

#define VD_L   LC(LG(LEFT))
#define VD_R   LC(LG(RIGHT))
#define VD_U   LG(TAB)

#define E_IEX   RA(N1)
#define E_IQM   RA(FSLH)

#define E_NN    RA(N)
#define E_CC    RA(C)
#define E_LL    RA(RS(SEMI))
#define E_OF    RA(N2)
#define E_OM    RA(N3)
#define E_DEG   RA(SEMI)
#define E_EUR   RA(N5)
#define E_PND   RA(N4)

#define E_AOB   RA(GRAVE)
#define E_ATC   RA(SQT)
#define E_ACF   RA(N6)
#define E_ADI   RA(RS(DQT))
#define E_ATI   RA(RS(GRAVE))

/ {
    macros {
        
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp Q       &kp W       &kp E       &kp R       &kp T                   &kp Y       &kp U       &kp I       &kp O       &kp P
&kp TAB     &kp A       &kp S       &kp D       &kp F       &kp G                   &kp H       &kp J       &kp K       &kp L       &kp SEMI    &kp RET
&kp LCTL    &kp Z       &kp X       &kp C       &kp V       &kp B                   &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &kp LALT
                                    &kp LWIN    &kp SPACE   &mo _RAISE              &mo _LOWER  &kp BSPC    &kp RSFT     
            >;
        };

        lower_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp EXCL    &kp AT      &kp HASH    &kp DLLR    &kp PRCNT               &trans      &kp N7      &kp N8      &kp N9      &trans              
&trans      &kp TILDE   &kp MINUS   &kp PLUS    &kp EQUAL   &kp E_PND               &trans      &kp N4      &kp N5      &kp N6      &kp N0      &trans    
&trans      &kp GRAVE   &kp FSLH    &kp ASTRK   &kp UNDER   &kp E_EUR               &trans      &kp N1      &kp N2      &kp N3      &mo _FUNCT  &kp RALT
                                    &trans      &trans      &mo _RAISE              &mo _LOWER  &trans      &trans  
            >;
        };

        raise_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp VD_L    &kp HOME    &kp UP      &kp END     &kp VD_U                &kp CARET   &kp AMPS    &kp ASTRK   &kp LPAR    &kp RPAR               
&trans      &kp ESC     &kp LEFT    &kp DOWN    &kp RIGHT   &kp VD_R                &kp LBRC    &kp LBKT    &kp RBKT    &kp RBRC    &kp SQT     &trans    
&trans      &mo _FUNCT  &kp PG_DN   &kp E_CC    &kp PG_UP   &kp DEL                 &kp BSLH    &kp PIPE    &kp LT      &kp GT      &kp DQT     &kp RALT
                                    &trans      &trans      &mo _RAISE              &mo _LOWER  &trans      &trans     
            >;
        };

        funct_layer {
                            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &bootloader &kp F7      &kp F8      &kp F9      &kp F12                 &kp F12     &kp F7      &kp F8      &kp F9      &bootloader
&trans      &bt BT_CLR  &kp F4      &kp F5      &kp F6      &kp F11                 &kp F11     &kp F4      &kp F5      &kp F6      &bt BT_CLR  &trans
&trans     &out OUT_TOG &kp F1      &kp F2      &kp F3      &kp F10                 &kp F10     &kp F1      &kp F2      &kp F3     &out OUT_TOG &trans
                                    &trans      &trans      &mo _RAISE              &mo _LOWER  &trans      &trans
            >;
        };

        adjust_layer {
            bindings = <
//          |           |           |           |           |           |           |           |           |           |           |           |           |           
            &kp E_IEX   &trans      &kp E_LL    &kp D_SHS   &kp C_VOL_UP            &kp C_PREV  &kp INS     &kp PSCRN   &kp SLCK    &kp PAUSE_BREAK
&trans      &kp CAPS    &caps_word  &kp E_OF    &kp D_MUT   &kp C_VOL_DN            &kp C_PP    &trans      &trans      &bt BT_SEL 3 &kp K_APP  &trans
&kp RALT    &kp NUHS    &trans      &kp E_DEG   &kp D_SIL   &kp C_MUTE              &kp C_NEXT &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &kp E_IQM &kp RCTL
                                    &kp LSFT    &trans      &mo _RAISE              &mo _LOWER  &trans      &kp RWIN
            >;
        };
    };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <_LOWER _RAISE>;
            then-layer = <_ADJUST>;
        };
    };
};